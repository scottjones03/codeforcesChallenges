(* 
  beautiful permutation: gcd(1*p1, 2*p2, ..., n*pn) > 1 
   ie all the values share a common divisor not equal to 1
   
integers are distinct from 1 to n in any order
, need to find number of beautiful permutations

1*n, 2*(n-1), 3*(n-2), ..., n*1
if n is even then checks out as there are n/2 even slots 
for n/2 odd numbers 

1*(n-1), 2*n, 3*(n-3), 4*(n-2), ... n*0
if n is odd then doesn't check out as 2 as a factor
if n is odd, then there are (n-1)/2 even slots for (n+1)/2 odd numbers

if gcd is 3 , then we need 2*n/3 slots that are multiples of three
but there are only n/3

so if gcd is x, then from 1 to n there are going to
be floor(n/x) numbers that are divisible by x so we can
put the numbers that aren't divisble by n in the slots 
where the slot is divisible by x, since slots are values from 1 to n,
there are floor(n/x) slots divisible by x and these must fit n-floor(n/x)
numbers, so floor(n/x)>=n-floor(n/x) -> n/x>=floor(n/x)>=n/2 -> n/x>=n/2
so for n>0, 2>=x>1 so x = 2 only

using the condition, 2*floor(n/2)>=n
for even n , it holds but for odd n, 2*floor(n-1/2)==n-1 < n so it doesn't hold

n has to be even otherwise 2 can't be common factor,

when n is even , we need need number of ways of arranging
all n/2 odd numbers in n/2 even slots * all n/2 even numbers in n/2 odd slots
(n/2)!*(n/2)!

(n/2)!**2 = r (mod x)

a*b mod c = 


MOD = 998244353
t = int(input())

for _ in range(t):
	n = int(input())
	if n & 1:
	    print(0)
	    continue
	ans = 1
	for i in range(1, n // 2 + 1):
		ans = ans * i % MOD
	ans = ans * ans % MOD
	print(ans)

*)

let read_int () = Scanf.scanf " %d" (fun x -> x);;
let modulo x y =
  let result = x mod y in
  if result >= 0 then result
  else result + y
;;
let rec mod_result x res = function
  | y -> 
    if (y==x) then modulo (res*x) 998244353
    else mod_result x (modulo (res*y) 998244353) (y+1)
;;
let run_case = function
  | n -> 
    if (n mod 2 == 0) then begin
      let ans = mod_result (n/2) 1 1 in
      mod_result (n/2) ans 1
    end
    else 0
;;
let rec iter_cases = function
  | 0 -> 0
  | t ->
    let n = read_int () in 
    print_int (run_case n);
    print_newline ();
    iter_cases (t-1)
;;
let t = read_int () in 
iter_cases t;;