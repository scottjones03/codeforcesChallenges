(* 2 strings a and b with unique chars *)
(* can remove any char from a/b and in c *)
(* cant do more than k on same string *)
(* keep going until a or b empty *)

(* need to haave smallest string in 
   alphabetical e.g abcde < abcdf*)

let read_string () = Scanf.scanf " %s" (fun s -> s);;
let read_int () = Scanf.scanf " %d" (fun x -> x);;

let rec create_char_arr data = function 
| 0 -> []
| n -> (String.get data (n-1))::create_char_arr data (n-1)
;;

let rec partition pivot left right = function 
| [] -> left, right 
| c::unsorted_arr ->
  if ((Char.code c) < (Char.code pivot)) then partition pivot (c::left) (right) unsorted_arr
  else partition pivot left (c::right) unsorted_arr 
;;

let rec quickSortFaster = function 
| [], sorted_arr -> sorted_arr 
| [c], sorted_arr -> c::sorted_arr
| pivot::unsorted_arr, sorted_arr -> 
  let left, right = partition pivot [] [] unsorted_arr in 
  quickSortFaster (left, pivot::quickSortFaster (right, sorted_arr))
;;

type a_or_b = A_CHOSE | B_CHOSE;;
let rec consume_strings k = function 
| _, [], _, _ -> []
| [], _, _, _ -> []
| a_c::a_chars, b_c::b_chars, consec_k, last_choice ->
  if (consec_k == k) then begin 
    if (last_choice = A_CHOSE) then b_c::(consume_strings k (a_c::a_chars, b_chars, 1, B_CHOSE))
    else a_c::(consume_strings k (a_chars, (b_c::b_chars), 1, A_CHOSE))
  end
  else begin 
    if (Char.code a_c < Char.code b_c) then begin 
      if (last_choice = A_CHOSE) then a_c::(consume_strings k (a_chars, (b_c::b_chars), consec_k+1, A_CHOSE))
      else a_c::(consume_strings k (a_chars, (b_c::b_chars), 1, A_CHOSE))
    end 
    else if (Char.code a_c > Char.code b_c) then begin 
      if (last_choice = A_CHOSE) then b_c::(consume_strings k ((a_c::a_chars), b_chars, 1, B_CHOSE))
      else b_c::(consume_strings k ((a_c::a_chars), b_chars, consec_k+1, B_CHOSE))
    end
    else begin 
      if (List.length a_chars < List.length b_chars) then begin 
        if (last_choice = A_CHOSE) then a_c::(consume_strings k (a_chars, (b_c::b_chars), consec_k+1, A_CHOSE))
        else a_c::(consume_strings k (a_chars, (b_c::b_chars), 1, A_CHOSE))
      end 
      else begin 
        if (last_choice = A_CHOSE) then b_c::(consume_strings k ((a_c::a_chars), b_chars, 1, B_CHOSE))
        else b_c::(consume_strings k ((a_c::a_chars), b_chars, consec_k+1, B_CHOSE))
      end
    end
  end

;;


let run_case = function
| () -> 
  let n = read_int () in 
  let m = read_int () in 
  let k = read_int () in 
  let a_str = read_string () in 
  let a_chars = quickSortFaster ((create_char_arr a_str n), []) in 
  let b_str = read_string () in 
  let b_chars = quickSortFaster ((create_char_arr b_str m), []) in 
  List.iter (fun x -> print_char x ) (consume_strings k (a_chars, b_chars, 0, A_CHOSE));
  print_newline ()
;; 

let rec iter_cases = function 
| 0 -> 0
| n -> 
  run_case ();
  iter_cases (n-1)
;;

let t = read_int () in 
iter_cases t;;