let read_int () = Scanf.scanf " %d" (fun x->x);;

let get_permutation = function
| (k, num_swaps) ->
     (* 1,2,3,4,5 
        2,1,3,4,5
        2,3,1,4,5
        2,3,4,1,5
        2,3,4,5,1
        
        1=number of swaps index
        do rest in order , skipping
        the number of swaps index
     *)
     let rec iter_p = function
     | i -> 
          if (i=k) then []
          else if (i<num_swaps) then 
              (i+2)::(iter_p (i+1))
          else if (i>num_swaps) then
              (i+1)::(iter_p (i+1))
          else
               1::(iter_p (i+1))
     in iter_p (0)
;;

let run_case = function
| k ->
    print_int (k);
    print_newline ();
    let rec run_permutations = function
     | swaps ->
          if (swaps =k) then ()
          else begin
          let p = get_permutation (k, swaps) in
          let rec out_p = function
          | [] -> print_newline ()
          | x::xs ->
              Printf.printf "%d " x;
              out_p (xs)
          in out_p (p);
          run_permutations (swaps+1)
          end
     in run_permutations (0);
;;

     
let rec iter_cases = function
| 0 -> ()
| n ->
     let k = read_int () in
     run_case (k);
     iter_cases (n-1)
;;

let cases = read_int () in iter_cases (cases);;
          
          
     
